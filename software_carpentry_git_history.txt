    1  ssh-keygen
    2  cat ~/.ssh/id_rsa.pub 
    3  git clone git@ssh.dev.azure.com:v3/swansea-university/IT/student-portal
    4  #! /bin/sh
    5  #
    6  # Licensed to the Apache Software Foundation (ASF) under one or more
    7  # contributor license agreements.  See the NOTICE file distributed with
    8  # this work for additional information regarding copyright ownership.
    9  # The ASF licenses this file to you under the Apache License, Version 2.0
   10  # (the "License"); you may not use this file except in compliance with
   11  # the License.  You may obtain a copy of the License at
   12  #
   13  # http://www.apache.org/licenses/LICENSE-2.0
   14  #
   15  # Unless required by applicable law or agreed to in writing, software
   16  # distributed under the License is distributed on an "AS IS" BASIS,
   17  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   18  # See the License for the specific language governing permissions and
   19  # limitations under the License.
   20  #
   21  ## This is a simple wrapper for the script bin/jmeter
   22  ##
   23  ## Basic JMeter startup script for Un*x systems
   24  ## See the "jmeter" script for details of options that can be used for Sun JVMs
   25  ##   ==============================================
   26  ##   Environment variables:
   27  ##   JVM_ARGS - optional java args, e.g. -Dprop=val
   28  ##
   29  ##   e.g.
   30  ##   JVM_ARGS="-Xms512m -Xmx512m" jmeter.sh etc.
   31  ##
   32  ##   ==============================================
   33  # resolve links - $0 may be a softlink (code as used by Tomcat)
   34  # N.B. readlink would be a lot simpler but is not supported on Solaris
   35  PRG="$0"
   36  while [ -h "$PRG" ]; do   ls=`ls -ld "$PRG"`;   link=`expr "$ls" : '.*-> \(.*\)$'`;   if expr "$link" : '/.*' > /dev/null; then     PRG="$link";   else     PRG=`dirname "$PRG"`/"$link";   fi; done
   37  PRGDIR=`dirname "$PRG"`
   38  # Make sure prerequisite environment variables are set
   39  if [ -z "$JAVA_HOME" -a -z "$JRE_HOME" ]; then   if [ "`uname`" = "Darwin" ]; then     if [ -x '/usr/libexec/java_home' ] ; then       export JAVA_HOME=`/usr/libexec/java_home`     elif [ -d "/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home" ]; then       export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home";     fi;   else     JAVA_PATH=`which java 2>/dev/null`;     if [ "x$JAVA_PATH" != "x" ]; then       JAVA_PATH=`dirname "$JAVA_PATH" 2>/dev/null`;       JRE_HOME=`dirname "$JAVA_PATH" 2>/dev/null`;     fi;     if [ "x$JRE_HOME" = "x" ]; then       if [ -x /usr/bin/java ]; then         JRE_HOME=/usr;       fi;     fi;   fi;   if [ -z "$JAVA_HOME" -a -z "$JRE_HOME" ]; then     echo "Neither the JAVA_HOME nor the JRE_HOME environment variable is defined";     echo "At least one of these environment variable is needed to run this program";     exit 1;   fi; fi
   40  if [ -z "$JAVA_HOME" -a "$1" = "debug" ]; then   echo "JAVA_HOME should point to a JDK in order to run in debug mode.";   exit 1; fi
   41  if [ -z "$JRE_HOME" ]; then   JRE_HOME="$JAVA_HOME"; fi
   42  if [ -z "$JAVA_HOME" ]; then   JAVA_HOME="$JRE_HOME"; fi
   43  #--add-opens if JAVA 9
   44  JAVA9_OPTS=
   45  # Minimal version to run JMeter
   46  MINIMAL_VERSION=8
   47  # Check if version is from OpenJDK or Oracle Hotspot JVM prior to 9 containing 1.${version}.x
   48  CURRENT_VERSION=`"${JAVA_HOME}/bin/java" -version 2>&1 | awk -F'"' '/version/ {gsub("^1[.]", "", $2); gsub("[^0-9].*$", "", $2); print $2}'`
   49  # Check if Java is present and the minimal version requirement
   50  if [ "$CURRENT_VERSION" -gt "$MINIMAL_VERSION" ]; then     JAVA9_OPTS="--add-opens java.desktop/sun.awt=ALL-UNNAMED --add-opens java.desktop/sun.swing=ALL-UNNAMED --add-opens java.desktop/javax.swing.text.html=ALL-UNNAMED --add-opens java.desktop/java.awt=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/sun.awt.X11=ALL-UNNAMED --add-opens=java.desktop/sun.awt.shell=ALL-UNNAMED"; fi
   51  # Don't add additional arguments to the JVM start, except those needed for Java 9
   52  JMETER_COMPLETE_ARGS=true
   53  # add the Java9 args before the user given ones
   54  JVM_ARGS="$JAVA9_OPTS $JVM_ARGS"
   55  export JVM_ARGS JMETER_COMPLETE_ARGS
   56  "${PRGDIR}/jmeter" "$@"
   57  git log --oneline --graph
   58  pwd
   59  cd 'OneDrive - Swansea University'/
   60  cd Desktop
   61  cd 2023-07-20-git-novice/
   62  git --oneline
   63  git log --oneline --graph
   64  cd planets/
   65  git status
   66  git add git_software_carpentry.txt 
   67  git log --oneline --graph
   68  rm test/ -r
   69  git --oneline
   70  git log --graph
   71  git log --oneline
   72  git log --graph --oneline
   73  git log --oneline --graph
   74  git log --graph
   75  nano mars.txt 
   76  cat mars.txt 
   77  git diff
   78  git diff HEAD mars.txt
   79  git show HEAD~1
   80  git show HEAD
   81  git show HEAD
   82  git show HEAD mars.txt
   83  git show 6da7c0
   84  
   85  git restore mars.txt
   86  git status 
   87  cat mars.txt 
   88  history > software_carpentry_git_history.txt
